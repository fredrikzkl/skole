// Navn: Nguyen Chu
// Studentnummer: s169954
// Klasse: 3AA

public class Oblig1 
{	
	// hjelpemetoder
	public static void bytt(int[] a, int i, int j)
	{
		int temp = a[i];
		a[i] = a[j];
		a[j] = temp;
	}
	
	public static int søkUsortert(int[] a, int verdi)
	  {
	    for (int i = 0; i < a.length; i++)
	      if (verdi == a[i]) return i;
	    return -1;   
	  }
	
	// For en tabell med lengde n, vil det forekomme n-1 sammenligninger av tabellverdier.
	/* Ekstraspørsmål: Færrest ombyttinger blir det når det minste tallet kommer først og tallene kommer i stigende rekkefølge. 
	Flest ombyttinger har vi når det største tallet ligger på a[0], for da blir det a.length-1 ombyttinger.
	I gjennomsnitt blir det (1/2)+(2/3)+(3/4)+(4/5) + (n-1/n) ombyttinger for n elementer. */
	public static int maks(int[] a)
	{
		if (a.length < 1)
		      throw new java.util.NoSuchElementException("a er tom");
		
		for (int i = 1; i < a.length; i++)
		{
			if (a[i-1] > a[i])
			{
				bytt(a, i, i-1);
			}
		}
	return	a[a.length-1];
	}
	
	// Dersom tabellen har lengden a, vil den ha (n-1)! sammenligninger av tabellverdier.
	public static void sortering(int[] a)
	{
		for (int i = 0; i < a.length; i++)
		{
			for (int j = i + 1; j < a.length; j++)
			{
				if (a[i] > a[j])
				{
					bytt(a, i, j);
				}
			}
		}
	}
	
	// Metoden har orden n, det vil si lineær orden i det verste tilfellet.
	
	public static int antallUlikeSortert(int[] a)
	{
		for (int i = 1; i < a.length; i++)
		{
			if (a[i] < a[i-1])
				throw new IllegalStateException("Tabellen er ikke sortert!");
		}
		int antallUlike = 1;
		if (a.length == 0) antallUlike = 0;
		else
		for (int j = 1; j < a.length; j++)
		{
			if (a[j] != a[j-1]) antallUlike++;
		}
		return antallUlike;
	}
	
	public static int antallUlikeUsortert(int[] a)
	{
		int antallUlike = 1;
		
		if(a.length = 0)
	}
}